name: Build and Release Chrome Extension

on:
  push:
    branches:
      - main # 当有新的推送到达 main 分支时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout repository
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: 🛠️ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # 使用最新的 LTS 版本的 Node.js

      # 安装项目依赖
      - name: 📦 Install dependencies
        run: npm ci

      # 构建项目
      - name: 🏗️ Build project
        run: npm run build

      # 从 manifest.json 获取版本号
      # 使用 Node.js 读取 public/manifest.json 文件并获取 version 字段
      # 将版本号保存到一个环境变量中，以便后续步骤使用
      - name: 📄 Get version from manifest.json
        id: get_version
        run: |
          # 使用 Node.js 读取 JSON 文件并打印版本号
          VERSION=$(node -p "require('./public/manifest.json').version")
          # 将版本号设置到 GITHUB_ENV 中
          echo "EXTENSION_VERSION=$VERSION" >> $GITHUB_ENV
          echo "🎉 Found extension version: $VERSION"

      # 打包 build 目录为 zip 文件
      # 使用 zip 命令将 build 目录打包，文件名使用版本号
      - name: ✉️ Create zip package
        run: |
          # 定义 zip 文件名，使用之前获取的版本号
          ZIP_FILE_NAME="${{ env.EXTENSION_VERSION }}.zip"
          # 打包 build 目录，生成 zip 文件在仓库根目录
          zip -r "$ZIP_FILE_NAME" build/
          echo "📦 Created zip file: $ZIP_FILE_NAME"
        env:
          # 确保 EXTENSION_VERSION 环境变量在这个步骤中可用
          EXTENSION_VERSION: ${{ env.EXTENSION_VERSION }}

      # 创建 GitHub Release
      # 使用 softprops/action-gh-release@v1 action 来创建 Release
      - name: 🔖 Create GitHub Release
        # 添加一个 ID，以便在 description 中引用 Action 的输出（如 previous_tag）
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # 指定要上传到 Release 的资产文件
          files: ${{ env.EXTENSION_VERSION }}.zip
          # 指定 Release 的 Git Tag 名称，通常是版本号，前面加个 v 是惯例
          tag_name: v${{ env.EXTENSION_VERSION }}
          # 指定 Release 的名称，增加一些表情符号增加活力
          name: ✨ v${{ env.EXTENSION_VERSION }} ✨
          # 立即发布，且不是预发布版本
          draft: false
          prerelease: false
          # 自动查找上一个 Release 的 Tag，这个信息可以在 description 中使用
          find_previous_tag: true
          # 指定 Release 的描述信息，使用 Markdown 格式，并利用变量和上下文信息
          body: |
            🚀 **Release v${{ env.EXTENSION_VERSION }}**
          # 自动生成 Release Notes
          generate_release_notes: true
        env:
          # GITHUB_TOKEN 是 GitHub Actions 自动提供的 Secret，用于认证进行 API 调用（如创建 Release）
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXTENSION_VERSION: ${{ env.EXTENSION_VERSION }}
